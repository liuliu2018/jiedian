#!/bin/bash

red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

#Add some basic function here
function LOGD() {
    echo -e "${yellow}[DEG] $* ${plain}"
}

function LOGE() {
    echo -e "${red}[ERR] $* ${plain}"
}

function LOGI() {
    echo -e "${green}[INF] $* ${plain}"
}

# check root
[[ $EUID -ne 0 ]] && LOGE "ERROR: You must be root to run this script! \n" && exit 1

# Check OS and set release variable
if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    release=$ID
elif [[ -f /usr/lib/os-release ]]; then
    source /usr/lib/os-release
    release=$ID
else
    echo "Failed to check the system OS, please contact the author!" >&2
    exit 1
fi

echo "The OS release is: $release"

LOGI "install acme..."
curl https://get.acme.sh | sh
if [ $? -ne 0 ]; then
    LOGE "install acme failed"
    return 1
else
    LOGI "install acme succeed"
fi

# check for acme.sh first
if ! command -v ~/.acme.sh/acme.sh &>/dev/null; then
    echo "acme.sh could not be found. we will install it"
    install_acme
    if [ $? -ne 0 ]; then
        LOGE "install acme failed, please check logs"
        exit 1
    fi
fi
# install socat second
case "${release}" in
ubuntu | debian | armbian)
    apt update && apt install socat -y
    ;;
centos | almalinux | rocky | oracle)
    yum -y update && yum -y install socat
    ;;
fedora)
    dnf -y update && dnf -y install socat
    ;;
arch | manjaro | parch)
    pacman -Sy --noconfirm socat
    ;;
*)
    echo -e "${red}Unsupported operating system. Please check the script and install the necessary packages manually.${plain}\n"
    exit 1
    ;;
esac
if [ $? -ne 0 ]; then
    LOGE "install socat failed, please check logs"
    exit 1
else
    LOGI "install socat succeed..."
fi

# get the domain here,and we need verify it
local domain=""
read -p "Please enter your domain name:" domain
LOGD "your domain is:${domain},check it..."
# here we need to judge whether there exists cert already
local currentCert=$(~/.acme.sh/acme.sh --list | tail -1 | awk '{print $1}')

if [ ${currentCert} == ${domain} ]; then
    local certInfo=$(~/.acme.sh/acme.sh --list)
    LOGE "system already has certs here,can not issue again,current certs details:"
    LOGI "$certInfo"
    exit 1
else
    LOGI "your domain is ready for issuing cert now..."
fi

# create a directory for install cert
certPath="/root/cert/${domain}"
if [ ! -d "$certPath" ]; then
    mkdir -p "$certPath"
else
    rm -rf "$certPath"
    mkdir -p "$certPath"
fi

# get needed port here
local WebPort=80
read -p "please choose which port do you use,default will be 80 port:" WebPort
if [[ ${WebPort} -gt 65535 || ${WebPort} -lt 1 ]]; then
    LOGE "your input ${WebPort} is invalid,will use default port"
fi
LOGI "will use port:${WebPort} to issue certs,please make sure this port is open..."
# NOTE:This should be handled by user
# open the port and kill the occupied progress
~/.acme.sh/acme.sh --set-default-ca --server letsencrypt
~/.acme.sh/acme.sh --issue -d ${domain} --listen-v6 --standalone --httpport ${WebPort}
if [ $? -ne 0 ]; then
    LOGE "issue certs failed,please check logs"
    rm -rf ~/.acme.sh/${domain}
    exit 1
else
    LOGE "issue certs succeed,installing certs..."
fi
# install cert
~/.acme.sh/acme.sh --installcert -d ${domain} \
    --key-file /root/cert/${domain}/privkey.pem \
    --fullchain-file /root/cert/${domain}/fullchain.pem --force

if [ $? -ne 0 ]; then
    LOGE "install certs failed,exit"
    rm -rf ~/.acme.sh/${domain}
    exit 1
else
    LOGI "install certs succeed,enable auto renew..."
fi

~/.acme.sh/acme.sh --upgrade --auto-upgrade
if [ $? -ne 0 ]; then
    LOGE "auto renew failed, certs details:"
    ls -lah cert/*
    chmod 755 $certPath/*
    exit 1
else
    LOGI "auto renew succeed, certs details:"
    ls -lah cert/*
    chmod 755 $certPath/*
fi
